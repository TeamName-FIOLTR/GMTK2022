[gd_resource type="ShaderMaterial" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 3.375

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 3.14159

[sub_resource type="VisualShaderNodeScalarInterp" id=7]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Radial_Fill"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "Line_Thickness"

[sub_resource type="VisualShaderNodeScalarUniform" id=23]
uniform_name = "Brightness"

[sub_resource type="VisualShaderNodeVectorOp" id=12]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
operator = 8

[sub_resource type="VisualShaderNodeCompare" id=15]
function = 5

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 0.827

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "color"

[sub_resource type="VisualShaderNodeCompare" id=18]
function = 5

[sub_resource type="VisualShader" id=19]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float Line_Thickness;
uniform float Radial_Fill;
uniform float Brightness;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	vec3 n_out8p0 = COLOR.rgb;

// ScalarUniform:20
	float n_out20p0 = Line_Thickness;

// Compare:9
	bool n_out9p0 = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333))<=n_out20p0;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:3
	vec3 n_in3p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out3p0 = n_out2p0 - n_in3p1;

// VectorDecompose:4
	float n_out4p0 = n_out3p0.x;
	float n_out4p1 = n_out3p0.y;
	float n_out4p2 = n_out3p0.z;

// ScalarOp:5
	float n_out5p0 = atan(n_out4p1, n_out4p0);

// Scalar:16
	float n_out16p0 = 3.141590;

// ScalarOp:18
	float n_in18p1 = -1.00000;
	float n_out18p0 = n_out16p0 * n_in18p1;

// ScalarUniform:19
	float n_out19p0 = Radial_Fill;

// ScalarMix:17
	float n_out17p0 = mix(n_out18p0, n_out16p0, n_out19p0);

// Compare:6
	bool n_out6p0 = n_out5p0<=n_out17p0;

// ScalarOp:11
	float n_out11p0 = (n_out9p0 ? 1.0 : 0.0) * (n_out6p0 ? 1.0 : 0.0);

// ScalarUniform:21
	float n_out21p0 = Brightness;

// ScalarOp:13
	float n_out13p0 = n_out11p0 * n_out21p0;

// VectorScalarMix:12
	vec3 n_in12p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in12p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out12p0 = mix(n_in12p0, n_in12p1, n_out13p0);

// Output:0
	ALBEDO = vec3(n_out11p0);
	ALPHA = n_out11p0;
	EMISSION = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 13.6144, 325.251 )
nodes/fragment/0/position = Vector2( 1240, 80 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -520, 360 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -340, 340 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -140, 360 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( 100, 360 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( 400, 220 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -40, 240 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( 20, 100 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( 240, 40 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 520, 160 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 960, 240 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 780, 220 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 500, 460 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 520, 340 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -20, 300 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 280, 240 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 240, 180 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( -180, 260 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -180, 120 )
nodes/fragment/21/node = SubResource( 23 )
nodes/fragment/21/position = Vector2( 640, 300 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 4, 1, 5, 0, 4, 0, 5, 1, 8, 0, 9, 0, 6, 0, 11, 1, 9, 0, 11, 0, 11, 0, 0, 0, 11, 0, 0, 1, 11, 0, 13, 0, 13, 0, 12, 2, 12, 0, 0, 5, 16, 0, 15, 1, 5, 0, 15, 0, 5, 0, 6, 0, 16, 0, 18, 0, 18, 0, 17, 0, 16, 0, 17, 1, 17, 0, 6, 1, 19, 0, 17, 2, 20, 0, 9, 1, 21, 0, 13, 1 )

[resource]
resource_local_to_scene = true
shader = SubResource( 19 )
shader_param/Line_Thickness = 0.2
shader_param/Radial_Fill = 1.0
shader_param/Brightness = 4.0
